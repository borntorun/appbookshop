/**
 * Directive appBookShop.components warp-autocomplete-typeaheadjs
 * (João Carvalho, 13-03-2015)
 *
 * Descrição: Directive/component to support typeahead.js autocomplete library (https://twitter.github.io/typeahead.js/)
 * with Bloodhound Integration (https://github.com/twitter/typeahead.js/blob/master/doc/bloodhound.md)
 *
 * Attributtes:
 * Required:
 * remote="remote url for datasource"
 *
 * Optional:
 * key             "key-for-datasource-model (default=name)",
 * model           "model to bind the input"
 * onselected      "function to call on item selected: event 'typeahead:selected'",
 * onclosed        "function to call on input close dropdown and lost focus: event 'typeahead:closed'"
 * oncursorchanged "function to call on cursor changed: event 'typeahead:cursorchanged'"
 * datasource      "name-for-css (default=datasource)"
 * limit           "max-items-to-show-on-dropdown (default=25)"
 * clearvalue      "specifies if value on input must be cleared on selection (default=false)"
 * minlensugestion "minimum lenght for trigger dropdown (default=3)"
 * placeholder     "placeholder text"
 * cssinput        "css classes to add for input field"
 * cssdropdown     "css class for dropdown element (span.tt-dropdown-menu in typeaheadjs structure) "
 * logonwarn       output warnings messages (default=false)
 */
(function () {
  'use strict';

  angular
    .module('appBookShop.components', ['ngSanitize'])
    .directive('warpAutocompleteTypeaheadjs', warpautocompletetypeaheadjs);

  /* @ngInject */
  function warpautocompletetypeaheadjs($log) {
    var directive = {
      // use as element: <warp-autocomplete-typeaheadjs .../>
      restrict: 'E',
      replace: true,
      scope: {
        remote: '@',
        key: '@?',
        datasource: '@?',
        onselected: '&?',
        onclosed: '&?',
        oncursorchanged: '&?',
        clearvalue: '@?',
        minlensugestion: '@?',
        limit: '@?',
        placeholder: '@?',
        cssinput: '@?',
        cssdropdown: '@?',
        model: '=?',
        logonwarn: '@?'
      },
      template:
        function(elem, attrs) {
          return '<input xpto="ola" type="text" ng-model="model" placeholder="{{placeholder}}" class="typeahead {{cssinput}}"/>';
        },
      link: linkfunction
    };
    return directive;

    //input.typeahead.{{classinput}}  input selector
    //span.tt-dropdown-menu.{{classinput}}  dropdown selector

    ////////////////
    function linkfunction(scope, element, attrs, ctrl) {
      var elemId = getId();
      scope.logonwarn = (scope.logonwarn || 'false') === 'true';
      element.attr('id', elemId);
      scope.minlensugestion = scope.minlensugestion || 3;
      scope.key = scope.key || 'name';
      scope.limit = scope.limit || 25;

      configTypeaheadBloodhound();

      if (scope.cssdropdown) {
        //var oDrop = $('span:has(input#' + elemId + ') .tt-dropdown-menu');
        //(oDrop && oDrop.addClass(scope.cssdropdown));
        element[0].parentNode.lastChild.className+= ' ' + scope.cssdropdown;
      }
      element.on('typeahead:autocompleted', OnSelected);
      element.on('typeahead:selected', OnSelected);
      element.on('typeahead:closed', OnClosed);
      element.on('typeahead:cursorchanged', OnCursorChanged);

      scope.$on('$destroy', function () {
        element.typeahead('destroy');
      });

      var callback = {
        onselected: setCallback(scope.onselected, 'onselected', 'typeahead:selected'),
        onclosed: setCallback(scope.onclosed, 'onclosed', 'typeahead:closed'),
        oncursorchanged: setCallback(scope.oncursorchanged, 'oncursorchanged', 'typeahead:cursorchanged')
      }
      function OnSelected(jqevent, item, dataset) {
        callback.onselected(item);
        (scope.clearvalue === 'true' && element.typeahead('val', ''));
      }
      function OnClosed(jqevent) {
        var o={};
        o[scope.key] = element.typeahead('val');
        callback.onclosed(o);
      }
      function OnCursorChanged(jqevent, item, dataset) {
        callback.oncursorchanged(item);
      }

      function configTypeaheadBloodhound() {
        if (!scope.remote) {
          logerror('Attribute [remote] was not defined.');
        }
        if (!scope.datasource) {
          scope.datasource = 'datasource';
          (scope.logonwarn && logwarn('Attribute [datasource] was not defined. Using default name:\'datasource\''));
        }
        var objectSource = new Bloodhound({
          datumTokenizer: Bloodhound.tokenizers.obj.whitespace(scope.key),
          queryTokenizer: Bloodhound.tokenizers.whitespace,
          limit: scope.limit,
          remote: scope.remote + '%QUERY'
        });
        //if (scope.remote) {
        objectSource.initialize().then(function () {
          element.typeahead({
            minLength: scope.minlensugestion,
            highlight: true,
            hint: false
          }, {
            name: scope.datasource,
            displayKey: scope.key,
            source: objectSource.ttAdapter()
            /*,templates: {
              empty: '',
              footer: '',
              header: ''
            }*/
          });
        });
        //}
      }

      function setCallback (fEvent, name, tag) {
        if (!(!fEvent? false : (!testIsFunction(fEvent)? false : testIsFunction(fEvent())))) {
          (scope.logonwarn && logwarn('\'' + name + '\' is not defined or is not a function.'));
          return function(item) {
            //if callback was not passed emit typeahead event on scope
            scope.$emit(tag, item);
          }
        }
        return function(item) {
          //call function callback
          fEvent()(item);
        };
      }
      function testIsFunction(f) {
        return {}.toString.call(f) === '[object Function]';
      }
      function getId() {
        var chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXTZabcdefghiklmnopqrstuvwxyz'.split(''), length = Math.floor(Math.random() * 10) + 6;
        var str = '';
        for (var i = 0; i < length; i++) {
          str += chars[Math.floor(Math.random() * chars.length)];
        }
        return 'artjs-' + str;
      }
      function logwarn(message) {
        $log.warn(message + '([angular-remote-typeaheadjs]:id:' + elemId + ')');
      }
      function logerror(message) {
        $log.error(message + '([angular-remote-typeaheadjs]:id:' + elemId + ')');
      }
    }
  }
}());
